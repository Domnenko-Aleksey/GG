# === РЕЖИМ ПОЛУЧЕНИЯ РЕКОМЕНДАЦИЙ ===
http://77.222.58.99:5000/?key=123&act=recom&&user_id=38082
key=07825135926cc98a4fac0b882315145d  # Cекретный ключ
act=recom  # 'recom' - получить рекомендации;
user_1=38082  # Id пользователя. Обязательный атрибут для режима работы act = 'recom'
days=30  # Анализ данных - за последние 30 дней (по умолчанию 30) - в режиме обучения модели


# === РЕЖИМ ОБУЧЕНИЯ МОДЕЛИ ===
http://77.222.58.99:5000/?key=123&act=fit&days=10
key=5a98c0e42e466032ae2a95bfa2d3899e  # Cекретный ключ
days=30  # Количество дней, за которые нам надо получить последние данные. Не обязательный параметр. По умолчанию = 30




Система позволяет подключить несколько моделей для реализации своей модели создайте новый класс Model + Название Вашей модели, например: 'ModelTfrs.py'
Основные моменты:

1. Саму модель хранить в свойствах экземпляра класса 'model', например MyModel.model (self.model = None  # Тут будет храниться модель)

2. У класса обязательно должен быть публичный метод MyModel.fit(days)  - обучение модели
	Аргумент - количество дней за которые берутся данные.
	Возвращает ответ в формате
	answer = {
		'status': 'OK',  # 'OK' или 'ERROR'
		'message': message  # 'message' - Ваша информация. Например у меня - точности моделей для 1, 5, 10, 50 и 100 рекомендаций и время выполнения операции
	}

3. У класса обязательно должен быть публичный метод MyModel.predict(user_id)  - получение списка рекомендаций
	Аргумент - id пользователя для которого подбираются каналы рекомендаций.
	Возвращает список рекомендованных каналов, например:  ["36707", "178019", "180960", "12681", "156262", "99600", "4423", "46071", "30023", "15389"]

4. Шаги операции получения данных обработки лучше всего записывать в лог 'log/status.log', xnj ,что бы легче всего находить слабые места и возникающие ошибки

Приватные методы можно делать, можно не делать. Я их сделал для удобства, разбив этап обучения на этапы, где каждый метод отвечает за свой этап:

__get_data_duration(days) # Получение данных
__data_processing()  # Обработка данных
__fit_model()  # Оучение модели

На каждом шаге проверяется корректоность работы метода и запись в лог результатов выполнения приватного метода

Есть метод получения данных website __get_data_website(self, days=30)  но в моём случае он не используется


pipreqs [параметры] [<путь>] - удобный модуль для экспорта зависимостей проекта